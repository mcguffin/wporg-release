/*
Builds a github release from current version number
*/

const colors = require('colors');
const wp = require('../wp-header.js');
const fs = require('fs');
const glob = require('glob');
const git = require('simple-git')('.');
const exec = require('child_process');
const https = require('https');
const prompts = require('prompts');
const { doing } = require('../doing.js');


const setup = async package => {
	if ( package.wporg.git.host !== 'github.com' ) {
		return;
	}
	let current_task;
	console.log( 'Configuring github release process'.white.bold );

	if ( process.platform === 'darwin' ) {
		let token,
			token_label;
		current_task = doing( 'Lookup Github access token in system keychain', 'Found one!', 'Please configure!' );
		try {
			token = exec.execSync( `security find-generic-password -a ${package.wporg.git.user} -s "https://api.github.com" -w`, { encoding: 'utf8' } );
			current_task.ok();
		} catch( err ) {
			current_task.fail();
			console.log('Please create an access token with Scope `repo` enabled on github: <https://github.com/settings/tokens>');

			const token_prompt = await prompts([
				{
					type: 'password',
					name: 'token',
					message: `Access token:`,
					initial: ''
				},
				{
					type: 'text',
					name: 'label',
					message: 'Label in MacOS Keychain:',
					initial: `<${package.wporg.git.user}@api.github.com> wporg-release`
				}
			], { onCancel: process.exit });

			if ( token_prompt.token !== '' ) {
				exec.execSync( `security add-generic-password -a "${package.wporg.git.user}" -l "${token_prompt.label}" -s "https://api.github.com" -j "Generated by mcguffin/wporg-release" -w "${token_prompt.token}"` );
				console.log('Token added to MacOS Keychain');
				console.log(`Account: ${package.wporg.git.user}`);
				console.log(`Where: https://api.github.com` );
				console.log(`Label: ${package.wporg.git.label}`);
			}
		}
		package.wporg.steps.push( 'github' );
	}
}

const run = ( dry = false ) => {
	return new Promise( ( resolve, reject ) => {

		let current_task;

		const package = require( process.cwd() + '/package.json' );

		const get_repo_data = () => new Promise( ( resolve_repo, reject_repo ) => {
			current_task = doing('Get git config')
			git
				.silent( true )
				.listRemote(['--get-url'], (err,res) => {
					if ( err ) {
						current_task.fail();
						reject_repo();
					} else {
						repo = res.match(/^git@github\.com:(.+)\.git/s)[1];
					}
				})
				.branch( (err,res) => {
					if ( err ) {
						current_task.fail();
						reject_repo();
					} else {
						branch = res.current;
					}
				})
				.exec( () => {
					token = exec.execSync( `security find-generic-password -a ${package.wporg.git.user} -s "https://api.github.com" -w`, { encoding: 'utf8' } ).trim();
					current_task.ok();
					resolve_repo( [ repo, branch, token ] )
				} );

		});
		const get_release_data = () => {

			const data = {
				version:		package.version,
				branch:			branch,
				require_wp:		wp.read_header_tag('readme.txt', 'Requires at least' ),
				max_wp:			wp.read_header_tag('readme.txt', 'Tested up to' ),
				require_php:	wp.read_header_tag('readme.txt', 'Requires PHP' ),
			}

			const req_data = {
				tag_name:			package.version,
				name:				package.version,
				body:				`Release ${data.version} from ${data.branch}

Requires at least: ${data.require_wp}
Tested up to: ${data.max_wp}
Requires PHP: ${data.require_php}`,
				draft:				false,
				prerelease:			false
			}
			const api_url = `https://${package.wporg.git.user}:${token}@api.github.com/repos/${repo}/releases`;
			return [ api_url, req_data ];
		};

		(async () => {
			let resp_data = '';
			const [ repo, branch, token ] = await get_repo_data();
			const [ api_url, req_data ] = get_release_data();

			if ( dry ) {
				console.log(`... api request data:`)
				console.log('url: ' + api_url.replace(/:([a-z0-9]+)@/,'**************'));
				console.log(req_data);
				resolve({});
			} else {
				current_task = doing('Creating release on github.com', 'Done','Failed');

				const req = https.request( api_url, {
					// host: 'api.github.com',
					// port: 443,
					// path: `repos/${repo}/releases`,
					method: 'POST',
					headers: {
		//				'Authorization' : 'token ${token}',
						'User-Agent' : 'Nodejs'
					}
				}, resp => {
					resp.setEncoding('utf8');
					resp.on('data',data => {
						resp_data += data;
					});
					resp.on('end',() => {
						const resp = JSON.parse( resp_data );
						if ( !! resp.id ) {
							current_task.ok()
							resolve( {} );
						} else {
							current_task.fail()
							reject( resp );
						}
					});
					resp.on('error',error => {
						current_task.fail()
						reject(error);
					});
				});
				req.write( JSON.stringify( req_data, null ) );
				req.end();


			}

		})()

//		const [ api_url, req_data ] = await get_release_data();

	} );

}



module.exports = { setup, run }
