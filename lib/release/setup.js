const fs = require('fs');
const prompts = require('prompts');
const exec = require('child_process');
const wp = require('../wp-header.js');
const gulp = require('gulp');

const build = package => {
	const config = { prebuild: [], build: [] };
	let textdomain, domainpath;

	try {
		// find gulp build task
		const tasks = JSON.parse( exec.execSync('gulp --tasks-json') );
		tasks.nodes.forEach( task => {
			if ( ['dist','build'].indexOf( task.label ) !== -1 ) {
				config.build.push( `gulp ${task.label}` );
			}
		})
	} catch(err) {

	}

	try {
		// i18n
		textdomain = wp.read_header_tag( wp.find_package_file(), 'Text Domain' ) || package.name;
		domainpath = wp.read_header_tag( wp.find_package_file(), 'Domain Path' ) || 'languages';

		domainpath = domainpath.replace(/^\/+|\/+$/g,'');
		if ( !! textdomain ) {
			config.prebuild.push( `wp i18n make-pot . ${domainpath}/${textdomain}.pot --domain=${textdomain}` )
		}
	} catch(err) {
		throw(err)
	}
	return config;
}

const git = async package => {
	const remote = exec.execSync( 'git remote get-url origin', { encoding: 'utf8' } ).trim();

	const user = exec.execSync( 'git config user.name', { encoding: 'utf8' } ).trim();
	const [ host , ] = remote.match('(github\.com|bitbucket\.org)');

	const user_prompt = await prompts([
		{
			type: 'text',
			name: 'user',
			message: `${host} username [${user}]:`,
			initial: user
		}
	]);

	if ( host === 'github.com' && process.platform === 'darwin' ) {
		let token,
			token_label;
		console.log('let\'s see if there is an access token.');
		try {
			token = exec.execSync( `security find-generic-password -a ${user_prompt.user} -s "https://api.github.com" -w`, { encoding: 'utf8' } );
			console.log('Yep, there is!');
		} catch( err ) {
			console.log('Nope, no token found.');
			console.log('Please create an access token with Scope `repo` enabled on github: <https://github.com/settings/tokens>');

			const token_prompt = await prompts([
				{
					type: 'password',
					name: 'token',
					message: `Access token:`,
					initial: ''
				},
				{
					type: 'text',
					name: 'label',
					message: 'Label in MacOS Keychain:',
					initial: `<${user_prompt.user}@api.github.com> wporg-release`
				}
			]);

			if ( token_prompt.token !== '' ) {
				exec.execSync( `security add-generic-password -a "${user_prompt.user}" -l "${token_prompt.label}" -s "https://api.github.com" -j "Generated by mcguffin/wporg-release" -w "${token_prompt.token}"` );
				console.log('Token added to MacOS Keychain');
				console.log(`Account: ${user_prompt.user}`);
				console.log(`Where: https://api.github.com` );
				console.log(`Label: ${token_prompt.label}`);
			}
		}
	}
	return { ...user_prompt, host };

}

const wporg = async package => {
	const config = {};
	const type = wp.get_package_type();

	if ( type === 'plugin' ) {
		config.svn = `https://plugins.svn.wordpress.org/${package.name}/`;
	} else if ( type === 'theme' ) {
		config.svn = false;
	}
	// mk assets dir
	const response = await prompts([
		{
			type: 'text',
			name: 'assets',
			message: `Assets directory [.wporg/]:`,
			initial: '.wporg'
		}
	]);

	fs.mkdirSync( response.assets, { recursive: true } );

	return {...config, ...response};
}

const config = async ( package = {} ) => {
	const add_step = ( config, step ) => {
		if ( ! config.steps ) {
			config.steps = [];
		}
		if ( config.steps.indexOf( step ) === -1 ) {
			config.steps.push( step );
		}
	};
	let stable_tag,
		config = package.wporg || {};

	if ( ! config.type ) {
		config.type = wp.get_package_type();
	}
	if ( ! config.type ) {
		throw('Couldn\'t identify Package Type (theme or plugin)' );
	}

	add_step(config,'build')

	config.build = build( package );

	console.log('Configure WP-' + ( config.type == 'plugin' ? 'Plugin' : 'Theme' ) + ' ' + wp.get_package_name() );

	let gitresult = await git( package );

	if ( gitresult ) {
		if ( gitresult.host === 'github.com' ) {
			add_step(config,'github')
			config['github'] = gitresult;
		} else {
			add_step(config,'git')
			config['git'] = gitresult;
		}
	}

	let wporgresult = await wporg( package );

	config['wporg'] = wporgresult;
	if ( !! wporgresult.svn ) {
		add_step(config,'wporg')
	} else {
		add_step(config,'pack')
	}
	return config;
}

module.exports = () => {
	const package = require( process.cwd() + '/package.json' );
	return new Promise( (resolve, reject) => {
		try {
			config( package ).then( config => {
				package.wporg = config;
				fs.writeFileSync( './package.json', JSON.stringify( package, null, 2 ) );
				resolve();
			} );
		} catch (err) {
			console.log(err);
			reject();
		}
	});

}
